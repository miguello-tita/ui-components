.InputStyled{
      position: absolute;
      margin: 0;
      padding: 0;
      opacity: 0;
      cursor: inherit
}
.InputCont{
    font-family: inherit;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: var(--textSizeLabel);
    line-height: var(--textlhLabel);
    font-weight: var(--textweightLabel);
    letter-spacing: var(--textspacingLabel);
    text-decoration: inherit;
    text-transform: inherit;
    color: var(--textColorLabel);
    display: inline-flex;
    align-items: center;
    vertical-align: middle
  }
.CheckCont{
    display: inline-block;
    position: relative;
    flex: 0 0 18px;
    box-sizing: content-box;
    width: 30px;
    height: 18px;
    line-height: 0;
    white-space: nowrap;
    cursor: pointer;
    vertical-align: bottom;
    padding: 11px
}

.CheckCont[inputMode='radio']{
    padding: 10px;
    position: relative;
    flex: 0 0 auto;
    box-sizing: content-box;
    width: 20px;
    height: 20px;
    cursor: pointer;
    will-change: opacity,transform,border-color,color;
}
.CheckLabel{
    margin-left: 0;
    margin-right: auto;
    padding-left: 4px;
    padding-right: 0;
    order:0 ;
}
.CheckBg{
    display: inline-flex;
    position: absolute;
    top: 11px;
    left: 11px;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    width: 18px;
    height: 18px;
    border: 2px solid var(--primaryColor);
    border-radius: 2px;
    background-color: transparent;
    pointer-events: none;
    will-change: background-color,border-color;
    transition: background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);

}

.CheckBg > i {
    opacity: 0;
    transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
    color: var(--textColor);
    font-size: 16px;
    margin-right: 2px;
}

.CheckBg[inputMode='radio']{
    position: absolute;
    box-sizing: border-box;
    border-width: 2px;
    border-style: solid;
    border-radius: 50%
}

.CheckBg[inputMode='toggle']{
    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0,0,0,.12);
    box-sizing: border-box;
    width: 20px;
    height: 20px;
    border: 10px solid;
    border-radius: 50%;
    pointer-events: none;
    z-index: 1;
    background-color: var(--primaryColor);
    border-color: var(--primaryColor);
    padding: 0;
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    transform: translateX(0);
    top: 7px;
    left: 6px;
    transition:
        transform 90ms cubic-bezier(0.4, 0, 0.2, 1),
        background-color 90ms cubic-bezier(0.4, 0, 0.2, 1),
        border-color 90ms cubic-bezier(0.4, 0, 0.2, 1);
}

.CheckTrack{
    box-sizing: border-box;
    width: 32px;
    height: 14px;
    border: 1px solid;
    border-radius: 7px;
    opacity: .54;
    background-color: var(--primaryColorLight);
    border-color: var(--primaryColor)r;
    transition:
    opacity 90ms cubic-bezier(0.4, 0, 0.2, 1),
    background-color 90ms cubic-bezier(0.4, 0, 0.2, 1),
    border-color 90ms cubic-bezier(0.4, 0, 0.2, 1);
}

.InputStyled:not(:checked):not(:indeterminate)~ .CheckBg{
    border-color: var(--bgColorInputNoCheck);
    background-color: transparent
}


.InputStyled:checked ~ .CheckBg{
    border-color: var(--primaryColor);
    background-color: var(--primaryColor);
}

.InputStyled:checked ~ .CheckBg > i{
    opacity: 1;
}

.InputStyled[inputMode='toggle']:checked ~ .CheckBg{
    transform: translateX(20px)
}

/* input error */
.input-error{
    border-color: var(--coloErrorInput);
}

.InputStyled[data-state="Error"]:checked ~ .CheckBg{
    border-color: var(--coloErrorInput);
    background-color: var(--coloErrorInput);
}

/* input succes */

.input-succes{
    border-color: var(--coloSuccesInput);
}

.InputStyled[data-state="Succes"]:checked ~ .CheckBg{
    border-color: var(--coloSuccesInput);
    background-color: var(--coloSuccesInput);
}

/* style disabled */
.InputCont[disabled] {
    pointer-events: none;
    opacity: var(--opacityDisabled);
}
.InputCont[disabled] .InputStyled:not(:checked):not(:indeterminate)~ .CheckBg{
    background-color: var(--bgColorDisabled);

}
